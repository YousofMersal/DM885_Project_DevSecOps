openapi: 3.1.0
info:
  title: public
  version: '1.0'
  description: Public API
tags:
  - name: users
  - name: jobs
  - name: models
  - name: solvers
servers:
  - url: 'http://localhost:3000'
paths:
  /users:
    get:
      summary: List users
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_info'
            application/xml:
              schema:
                type: object
        '400':
          description: Bad Request
        '403':
          description: Forbidden
      operationId: get-user
    post:
      summary: Create user
      tags:
        - users
      operationId: post-user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User_create'
      responses:
        '201':
          description: Created
        '403':
          description: Forbidden
    parameters: []
  '/users/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Get user
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_info'
              examples: {}
      operationId: get-users-userId
    delete:
      summary: Delete user
      tags:
        - users
      responses:
        '200':
          description: OK
      operationId: delete-users-userId
    put:
      summary: Update user
      tags:
        - users
      responses:
        '200':
          description: OK
      operationId: put-users-userId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User_create'
        description: ''
  '/users/{userId}/jobs/cancel':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: Cancel user jobs
      tags:
        - users
      responses:
        '200':
          description: OK
      operationId: post-users-userId-jobs-cancel
  /users/login:
    post:
      summary: Login
      tags:
        - users
      responses:
        '200':
          description: OK
      operationId: post-auth-login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
        description: ''
    parameters: []
  /users/logout:
    post:
      summary: Logout
      operationId: post-auth-logout
      responses:
        '200':
          description: OK
      tags:
        - users
    parameters: []
  /jobs:
    get:
      summary: List jobs
      tags:
        - jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job_info'
      operationId: get-jobs
    post:
      summary: Create job
      responses:
        '201':
          description: Created
      operationId: post-jobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job_create'
        description: ''
      tags:
        - jobs
  '/jobs/{jobId}':
    parameters:
      - schema:
          type: string
        name: jobId
        in: path
        required: true
    get:
      summary: Get job
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job_info'
      operationId: get-jobs-jobId
      tags:
        - jobs
    delete:
      summary: Delete job
      tags:
        - jobs
      responses:
        '200':
          description: OK
      operationId: delete-jobs-jobId
  '/jobs/{jobId}/result':
    parameters:
      - schema:
          type: string
        name: jobId
        in: path
        required: true
    get:
      summary: Get job result
      tags:
        - jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job_result'
      operationId: get-jobs-jobId-result
    post:
      summary: Add job result
      operationId: post-jobs-jobId-result
      responses:
        '200':
          description: OK
      tags:
        - jobs
  '/jobs/{jobId}/cancel':
    parameters:
      - schema:
          type: string
        name: jobId
        in: path
        required: true
    post:
      summary: Cancel job
      tags:
        - jobs
      responses:
        '200':
          description: OK
      operationId: post-jobs-jobId-cancel
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            examples:
              example-1:
                value:
                  - typeA
                  - typeB
                  - typeC
        description: Specify which solvers to cancel
  /models:
    post:
      summary: Create model
      tags:
        - models
      responses:
        '200':
          description: OK
      operationId: post-models
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                content:
                  type: string
              required:
                - name
                - content
    get:
      summary: List models
      operationId: get-models
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Model_info'
      tags:
        - models
  '/models/{modelId}':
    parameters:
      - schema:
          type: string
        name: modelId
        in: path
        required: true
    get:
      summary: Get model
      tags:
        - models
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model_info'
      operationId: get-models-modelId
    put:
      summary: Update model
      tags:
        - models
      responses:
        '201':
          description: Created
      operationId: put-models-modelId
    delete:
      summary: Delete model
      tags:
        - models
      responses:
        '200':
          description: OK
      operationId: delete-models-modelId
  '/models/{modelId}/data':
    parameters:
      - schema:
          type: string
        name: modelId
        in: path
        required: true
    post:
      summary: Add data
      tags:
        - models
      responses:
        '200':
          description: OK
      operationId: post-models-modelId-data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                content:
                  type: string
    get:
      summary: List data
      operationId: get-models-modelId-data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Data_info'
      tags:
        - models
  '/models/{modelId}/data/{dataId}':
    parameters:
      - schema:
          type: string
        name: modelId
        in: path
        required: true
      - schema:
          type: string
        name: dataId
        in: path
        required: true
    get:
      summary: Get data
      tags:
        - models
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data_info'
      operationId: get-models-modelId-data-dataId
    put:
      summary: Update data
      tags:
        - models
      responses:
        '200':
          description: OK
      operationId: put-models-modelId-data-dataId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                content:
                  type: string
      description: ''
    delete:
      summary: Delete data
      tags:
        - models
      responses:
        '200':
          description: OK
      operationId: delete-models-modelId-data-dataId
  /solvers:
    get:
      summary: List solvers
      tags:
        - solvers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                example-1:
                  value:
                    - string
      operationId: get-solvers
    put:
      summary: Update solvers
      operationId: put-solvers
      responses:
        '200':
          description: OK
      tags:
        - solvers
components:
  schemas:
    User_create:
      title: User_create
      x-stoplight:
        id: uib7be9cxaivf
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
      required:
        - username
        - password
        - email
    User_info:
      title: User_info
      x-stoplight:
        id: o990xy1y1f5i8
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        jobIds:
          type: array
          items:
            type: string
        modelIds:
          type: array
          items:
            type: string
    Job_info:
      title: Job_info
      x-stoplight:
        id: ln3dyvs5h60g1
      type: object
      properties:
        id:
          type: string
        solverTypes:
          type: array
          items:
            type: string
        modelId:
          type: string
        dataId:
          type: string
        userId:
          type: string
      required:
        - solverTypes
        - modelId
    Job_create:
      title: Job_create
      x-stoplight:
        id: ov0zdtn4094u5
      type: object
      properties:
        id:
          type: string
        solverTypes:
          type: array
          items:
            type: string
        modelId:
          type: string
        dataId:
          type: string
        options:
          type: object
          properties:
            timeoutMs:
              type: integer
            maxMemoryMb:
              type: integer
            noOfVcpu:
              type: integer
    Job_result:
      title: Job_result
      x-stoplight:
        id: dnvaj0bgb14wn
      type: object
      properties:
        id:
          type: string
        solverType:
          type: string
        solution:
          type: string
        solveTimeMs:
          type: integer
    Model_info:
      title: Model_info
      x-stoplight:
        id: txnq5kqs4wjas
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        content:
          type: string
        userId:
          type: string
    Data_info:
      title: Data_info
      x-stoplight:
        id: ilykln96rl0fs
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        content:
          type: string

